@using SkiaSharp
@using SkiaSharp.Views.Blazor

<div class="sk-canvas-wrapper sk-canvas-fullscreen">
    <SKCanvasView @ref="_canvasView"
                  OnPaintSurface="Paint"
                  EnableRenderLoop="true"
                  style="width:100%;height:100%;display:block;" />
</div>

@code {
    private SKCanvasView _canvasView;
    private float _t;
    private double _lastStamp;

    private void Paint(SKPaintSurfaceEventArgs e)
    {
        var now = System.Diagnostics.Stopwatch.GetTimestamp() / (double)System.Diagnostics.Stopwatch.Frequency;
        if (_lastStamp == 0) _lastStamp = now;
        var dt = now - _lastStamp;
        _lastStamp = now;
        _t += (float)dt;

        var canvas = e.Surface.Canvas;
        var info = e.Info;
        canvas.Clear(new SKColor(10, 12, 20));

        using var paint = new SKPaint { IsAntialias = true, Style = SKPaintStyle.StrokeAndFill };

        var cx = info.Width / 2f;
        var cy = info.Height / 2f;

        float baseRadius = Math.Min(info.Width, info.Height) * 0.42f;
        float pulse = (float)(System.Math.Sin(_t * 2) * 0.05f);
        float radius = baseRadius * (1 + pulse);

        using (var shader = SKShader.CreateRadialGradient(
                   new SKPoint(cx, cy), radius,
                   new[] {
                       new SKColor(40, 80, 220, 255),
                       new SKColor(120, 60, 255, 190),
                       new SKColor(0, 0, 0, 0)
                   },
                   new float[] { 0f, 0.65f, 1f },
                   SKShaderTileMode.Clamp))
        {
            paint.Shader = shader;
            canvas.DrawCircle(cx, cy, radius, paint);
        }

        int points = 180;
        using var path = new SKPath();
        for (int i = 0; i <= points; i++)
        {
            float p = i / (float)points;
            float angle = p * System.MathF.PI * 2f;
            float rx = radius * 0.75f * System.MathF.Sin(angle * 3 + _t * 0.8f);
            float ry = radius * 0.75f * System.MathF.Cos(angle * 4 + _t * 1.1f);
            float x = cx + rx;
            float y = cy + ry;
            if (i == 0) path.MoveTo(x, y); else path.LineTo(x, y);
        }

        using var stroke = new SKPaint {
            IsAntialias = true,
            Style = SKPaintStyle.Stroke,
            StrokeWidth = 2f,
            Color = new SKColor(200, 240, 255, 120)
        };
        canvas.DrawPath(path, stroke);

        using var dotPaint = new SKPaint {
            IsAntialias = true,
            Style = SKPaintStyle.Fill,
            Color = new SKColor(255, 255, 255, 210)
        };
        int dotCount = 28;
        for (int i = 0; i < dotCount; i++)
        {
            float u = i / (float)dotCount;
            float angle = u * System.MathF.PI * 2f + _t * 0.6f;
            float dx = cx + radius * 0.95f * System.MathF.Cos(angle) * 0.55f;
            float dy = cy + radius * 0.95f * System.MathF.Sin(angle) * 0.55f;
            float size = 3.5f + (System.MathF.Sin(angle * 3 + _t * 3f) + 1) * 2.8f;
            canvas.DrawCircle(dx, dy, size, dotPaint);
        }

        // Center, translucent site name overlay
        float fontSize = Math.Min(info.Width, info.Height) * 0.22f;
        using var typeface = SKTypeface.FromFamilyName("Arial", SKFontStyle.Bold);
        using var font = new SKFont(typeface, fontSize);
        using var textPaint = new SKPaint {
            IsAntialias = true,
            Color = new SKColor(255, 255, 255, 26), // subtle overlay
            Style = SKPaintStyle.Fill
        };
        const string text = "tolzy.net";
        float textWidth = font.MeasureText(text);
        var metrics = font.Metrics;
        // baseline centered vertically
        float baselineY = cy - (metrics.Ascent + metrics.Descent) / 2f;
        canvas.DrawText(text, cx - textWidth / 2f, baselineY, SKTextAlign.Left, font, textPaint);
    }
}
